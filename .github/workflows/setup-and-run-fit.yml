name: Run FIT Tests
run-name: ${{ github.actor }} Running FIT tests on cbdinoclusters
on: [push]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment:
      name: env
    steps:
      - uses: actions/checkout@v3
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone and setup couchbase jvm client 
        run: |
          git clone git@github.com:couchbase/couchbase-jvm-clients.git
          cd couchbase-jvm-clients
          # make
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone and setup fit
        run: |
          git clone git@github.com:couchbaselabs/transactions-fit-performer.git
          cd transactions-fit-performer
          docker build --no-cache -f test-driver/Dockerfile -t fit/test-driver:latest .
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone jenkins sdk repo
        run: |
          git clone git@github.com:couchbaselabs/jenkins-sdk.git
          cd jenkins-sdk
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: create FIT network
        run: |
          docker network create -d bridge fit 
      - name: start {{ vars.PERFORMER }}  performer
        run: |
          cd jenkins-sdk
          if [ ${{ vars.PERFORMER }} == java ]; then
            ./gradlew buildPerformer --args="-d ../ -i java-performer -s java-sdk"
            docker run --network=fit -d -p 8060:8060 java-performer
          elif [ ${{ vars.PERFORMER }} == scala ]; then
            ./gradlew buildPerformer --args="-d ../ -i scala-performer -s scala"
            docker run --network=fit -d -p 8060:8060 scala-performer
          elif [ ${{ vars.PERFORMER }} == c++ ]; then
            ./gradlew buildPerformer --args="-d ../ -i cxx-performer -s c++"
            docker run --network=fit -d -p 8060:8060 cxx-performer
          elif [ ${{ vars.PERFORMER }} == dotnet ]; then
            ./gradlew buildPerformer --args="-d ../ -i dotnet-performer -s dotnet"
            docker run --network=fit -d -p 8060:8060 dotnet-performer
          elif [ ${{ vars.PERFORMER }} == go ]; then
            ./gradlew buildPerformer --args="-d ../ -i go-performer -s go"
            docker run --network=fit -d -p 8060:8060 go-performer
          elif [ ${{ vars.PERFORMER }} == ruby ]; then
            ./gradlew buildPerformer --args="-d ../ -i ruby-performer -s ruby"
            docker run --network=fit -d -p 8060:8060 ruby-performer
          elif [ ${{ vars.PERFORMER }} == python ]; then
            ./gradlew buildPerformer --args="-d ../ -i python-performer -s python"
            docker run --network=fit -d -p 8060:8060 python-performer
          elif [ ${{ vars.PERFORMER }} == node ]; then
            ./gradlew buildPerformer --args="-d ../ -i node-performer -s node"
            docker run --network=fit -d -p 8060:8060 node-performer
          else [ ${{ vars.PERFORMER }} == ""]; then
            echo "No Performer passed"
            exit 1
          fi
      - name: Edit values from the FITConfiguration.json
        run: |
          cd transactions-fit-performer/test-driver
          echo "`jq --arg e "${{ vars.URL }}" '.situational.capella.url=$e' FITConfiguration.example.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.EXCLUDETESTS }}" '.excludeTests=[$e]' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.ACCESSKEY }}" '.situational.capella.accessKey=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PRIVATEKEY }}" '.situational.capella.privateKey=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PROJECTID }}" '.situational.capella.projectId=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.TENANTID }}" '.situational.capella.tenantId=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.USERNAME }}" '.situational.capella.username=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PASSWORD }}" '.situational.capella.password=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq 'del(.situational.capella.overrideToken)' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq 'del(.situational.capella.cloudProvider)' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq 'del(.situational.capella.region)' FITConfiguration.json`" > FITConfiguration.json
          cat FITConfiguration.json
      # - name: Create postgres perf db
      #   run: |
      #     docker network create -d bridge perf 
      #     docker run -d --restart=always -p 5432:5432 -e POSTGRES_PASSWORD=password --network perf --name timedb timescale/timescaledb:latest-pg14
      #     sleep 10;
      #     docker exec timedb psql -U postgres -c "CREATE DATABASE perf;"
      #     cd jenkins-sdk
      #     ./gradlew setupPerfDatabase
      # - name: Run FIT tests
      #   run: |
      #     cd transactions-fit-performer
      #     mvn clean install
          
          
