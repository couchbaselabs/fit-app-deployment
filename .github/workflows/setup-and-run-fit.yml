name: Run SIT tests with private endpoints
run-name: ${{ github.actor }} Run SIT tests with private endpoints
on: 
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      sdk:
        description: SDK Performer to use
        type: choice
        options:
        - "java"
        - "go"
        - ".net"
        - "c++"
        - "node"
        - "python"
        - "ruby"
        - "scala"
        - "kotlin"
        - "php"
      cloud:
        description: The Cloud service provider
        type: choice
        options:
        - "AWS"
        - "Azure"
        - "GCP"
      cloud-region:
        description: The region to deploy the cluster to (if empty will use appropriate default that works with PE testing)
        type: string
      private-endpoints:
        description: Run the tests with private endpoints
        type: choice
        options:
        - "true"
        - "false"
      server-version:
        description: The server version to use on Capella (defaults only currrently, no specific images)
        type: choice
        options:
        - "7.2"
        - "7.6"
      run-specific-test:
        description: Target a specific test to run (i.e. CbDinoTest#rebalance3To5NodesMixedKvAndQuery)
        type: string
      sbx-id-api:
        description: The sandbox api (i.e. https://api.sbx-10.sandbox.nonprod-project-avengers.com) iff using the sbx environment 
        type: string
      sbx-org-id:
        description: The sandbox organisation id to deploy to
        type: string
      sbx-user:
        description: The user for the given sandbox (must already be created)
        type: string
      sbx-password:
        description: The user password for the given sandbox (must already be created)
        type: string

jobs:
  build:
    name: Build
    runs-on: [self-hosted, aws]
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Parameters being used in the run
        run: |
          echo "${{ toJSON(github.event.inputs) }}"
      - uses: actions/checkout@v3
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: install maven
        run: |
          sudo rm /var/lib/dpkg/lock-frontend
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -version
      - name: install dotnet
        run: |
          sudo apt-get install -y gpg
          wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
          sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
          wget https://packages.microsoft.com/config/ubuntu/22.04/prod.list
          sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
          sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
          sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update && \
            sudo apt-get install -y aspnetcore-runtime-8.0
      - name: clone and setup couchbase jvm client 
        run: |
          git clone git@github.com:couchbase/couchbase-jvm-clients.git
          case "${{ github.event.inputs.sdk }}" in
            ("dotnet")
              git clone git@github.com:couchbase/couchbase-net-client.git
              ;;
            (*)
              echo "We are good here"
              ;;
          esac
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone jenkins sdk repo
        run: |
          git clone git@github.com:couchbaselabs/jenkins-sdk.git
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: create FIT network
        run: |
          docker network create -d bridge fit
      - name: Download and setup cb-dino cluster
        run: |
          wget https://github.com/couchbaselabs/cbdinocluster/releases/download/v0.0.20/cbdinocluster-linux
          chmod 744 ./cbdinocluster-linux
          pwd
      - name: init cbdino cluster for ${{ vars.DEPLOYER }}
        env:
          CAPELLA_ENDPOINT: ${{ inputs.sbx-id-api || vars.CAP_END_POINT }}
          CAPELLA_OID: ${{ inputs.sbx-org-id || vars.CAP_OID }}
          CAPELLA_USER: ${{ inputs.sbx-user || vars.CAP_USER }}
          CAPELLA_PASS: ${{ inputs.sbx-password || vars.CAP_PASS }}
        run: |
          ./cbdinocluster-linux init --auto
          cat ~/.cbdinocluster
      - name: clone fit and build gRPC
        run: |
          git clone git@github.com:couchbaselabs/transactions-fit-performer.git
          case "${{ github.event.inputs.sdk }}" in
            ("dotnet")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            ("cpp")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            (*)
              echo "We are good for this"
              ;;
          esac
          cd transactions-fit-performer/gRPC/jvm
          mvn clean install
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: start ${{ github.event.inputs.sdk }}  performer
        run: |
          cd jenkins-sdk
          case "${{ github.event.inputs.sdk }}" in
            ("dotnet")
              ./gradlew buildPerformer --args="-d ../ -s ${{ github.event.inputs.sdk }} -i ${{ github.event.inputs.sdk }}-performer -v 3.4.14-rc1" 
              ;;
            (*)
              ./gradlew buildPerformer --args="-d ../ -i ${{ github.event.inputs.sdk }}-performer -s ${{ github.event.inputs.sdk }}"
              ;;
          esac
          docker run --network=fit -d --name ${{ github.event.inputs.sdk }}-performer-container -p 8060:8060 ${{ github.event.inputs.sdk }}-performer
      - name: Edit values from the FITConfiguration.json
        run: |
          cd transactions-fit-performer/test-driver
          echo "`jq --arg e "${{ vars.EXCLUDETESTS }}" '.excludeTests=[$e]' FITConfiguration.example.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ github.event.inputs.server-version }}" '.situational.cbdino.version=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ github.event.inputs.cloud }}" '.situational.cbdino.deployer=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ github.event.inputs.cloud-region }}" '.situational.cbdino.region=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.CBDINO_PATH }}" '.situational.cbdino.cbDinoClusterAppPath=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGHOST }}" '.situational.database.jdbc=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGUSERNAME }}" '.situational.database.username=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ secrets.PG_PASSWORD }}" '.situational.database.password=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --argjson e "${{ github.event.inputs.private-endpoints }}" '.situational.cbdino.enablePrivateEndpoint=$e' FITConfiguration.json`" > FITConfiguration.json
          cat FITConfiguration.json
      - name: build driver docker image
        run: |
          cd transactions-fit-performer
          docker build --no-cache -f test-driver/Dockerfile -t fit/test-driver:latest .
      - name: Run SIT tests
        run: |
         cd transactions-fit-performer
         mvn -B --projects test-driver --also-make -Dmaven.test.failure.ignore -DfailIfNoTests=false -Dtest=${{ github.event.inputs.run-specific-test }} test -Dgroups=situational,cbDino -DexcludedGroups=openshift,capella
      - name: Capture ${{ github.event.inputs.sdk }} performer logs
        run: |
         docker logs ${{ github.event.inputs.sdk }}-performer-container
