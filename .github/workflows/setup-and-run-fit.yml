name: Run FIT Tests
run-name: ${{ github.actor }} Running FIT tests on cbdinoclusters
on: [push]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment:
      name: env
    steps:
      - uses: actions/checkout@v3
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: setup couchbase jvm client 
        run: |
          git clone git@github.com:couchbase/couchbase-jvm-clients.git
          cd couchbase-jvm-clients
          # make
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: setup fit 
        run: |
          git clone git@github.com:couchbaselabs/transactions-fit-performer.git
          cd transactions-fit-performer
          docker build --no-cache -f test-driver/Dockerfile -t fit/test-driver:latest .
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: setup jenkins sdk
        run: |
          git clone git@github.com:couchbaselabs/jenkins-sdk.git
          cd jenkins-sdk
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: create FIT network
        run: |
          docker network create fit  
      - name: start java performer
        run: |
          cd jenkins-sdk
          ./gradlew buildPerformer --args="-d ../ -i java-performer -s java-sdk"
          cd ..
          cd couchbase-jvm-clients
          docker run --network=fit -dit --rm --expose 8060 java-performer
      - name: Edit values from the FITConfiguration.json
        run: |
          cd transactions-fit-performer/test-driver
          echo "`jq --arg e "${{ vars.URL }}" '.situational.capella.url=$e' FITConfiguration.example.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.EXCLUDETESTS }}" '.excludeTests=[$e]' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.ACCESSKEY }}" '.situational.capella.accessKey=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PRIVATEKEY }}" '.situational.capella.privateKey=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PROJECTID }}" '.situational.capella.projectId=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.TENANTID }}" '.situational.capella.tenantId=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.USERNAME }}" '.situational.capella.username=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PASSWORD }}" '.situational.capella.password=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.OVERRIDETOKEN }}" '.situational.capella.overrideToken=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.CLOUDPROVIDER }}" '.situational.capella.cloudProvider=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.REGION }}" '.situational.capella.region=$e' FITConfiguration.json`" > FITConfiguration.json
          cat FITConfiguration.json
      - name: Run FIT tests
        run: |
          cd transactions-fit-performer
          cd gRPC/jvm
          rm -rf src
          rm -rf target
          cd ../..
          mvn install
