name: Run SIT tests with private endpoints
run-name: ${{ github.actor }} Run SIT tests with private endpoints
on: workflow_dispatch
jobs:
  build:
    name: Build
    runs-on: [self-hosted, aws]
    environment:
      name: env
    steps:
      - uses: actions/checkout@v3
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: install maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -version
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: install dotnet
        run: |
          sudo apt-get update
          sudo apt install dotnet-sdk-8.0
          dotnet --info
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone and setup couchbase jvm client 
        run: |
          git clone git@github.com:couchbase/couchbase-jvm-clients.git
          case "${{ vars.PERFORMER }}" in
            ("dotnet")
              git clone git@github.com:couchbase/couchbase-net-client.git
              ;;
            (*)
              echo "We are good here"
              ;;
          esac
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone jenkins sdk repo
        run: |
          git clone git@github.com:couchbaselabs/jenkins-sdk.git
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: create FIT network
        run: |
          docker network create -d bridge fit
      - name: Download and setup cb-dino cluster
        run: |
          wget https://github.com/couchbaselabs/cbdinocluster/releases/download/v0.0.20/cbdinocluster-linux
          chmod 744 ./cbdinocluster-linux
          pwd
      - name: init cbdino cluster for ${{ vars.DEPLOYER }}
        run: |
          case "${{ vars.DEPLOYER }}" in
            ("docker")
              ./cbdinocluster-linux init --auto
              ;;
            (*)
              echo -e "n\nn\Yn\nY\nn" | ./cbdinocluster-linux init --aws-region "us-west-2" --capella-endpoint ${{ vars.CAP_END_POINT }} --capella-oid ${{ vars.CAP_OID }} --capella-user ${{ vars.CAP_USER }} --capella-pass ${{ vars.CAP_PASS }}
              ;;
          esac
          cat ~/.cbdinocluster
      - name: clone fit and build gRPC
        run: |
          git clone git@github.com:couchbaselabs/transactions-fit-performer.git
          case "${{ vars.PERFORMER }}" in
            ("dotnet")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            ("cpp")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            (*)
              echo "We are good for this"
              ;;
          esac
          cd transactions-fit-performer/gRPC/jvm
          mvn clean install
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: start ${{ vars.PERFORMER }}  performer
        run: |
          cd jenkins-sdk
          case "${{ vars.PERFORMER }}" in
            ("dotnet")
              ./gradlew buildPerformer --args="-d ../ -s ${{ vars.PERFORMER }} -i performer --build-validation=auto" 
              ;;
            (*)
              ./gradlew buildPerformer --args="-d ../ -i ${{ vars.PERFORMER }}-performer -s ${{ vars.PERFORMER }}"
              ;;
          esac
          docker run --network=fit -d -p 8060:8060 ${{ vars.PERFORMER }}-performer
      - name: Edit values from the FITConfiguration.json
        run: |
          cd transactions-fit-performer/test-driver
          echo "`jq --arg e "${{ vars.EXCLUDETESTS }}" '.excludeTests=[$e]' FITConfiguration.example.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.SERVER_VERSION }}" '.situational.cbdino.version=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.DEPLOYER }}" '.situational.cbdino.deployer=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.REGION }}" '.situational.cbdino.region=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.CBDINO_PATH }}" '.situational.cbdino.cbDinoClusterAppPath=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGHOST }}" '.situational.database.jdbc=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGUSERNAME }}" '.situational.database.username=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGPASSWORD }}" '.situational.database.password=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --argjson e "${{ vars.ENABLE_PE }}" '.situational.cbdino.enablePrivateEndpoint=$e' FITConfiguration.json`" > FITConfiguration.json
          cat FITConfiguration.json
      - name: build driver docker image
        run: |
          cd transactions-fit-performer
          docker build --no-cache -f test-driver/Dockerfile -t fit/test-driver:latest .
      - name: Run SIT tests
        run: |
         cd transactions-fit-performer
         mvn --projects test-driver --also-make -Dmaven.test.failure.ignore -DfailIfNoTests=false test -Dgroups=situational,cbDino -DexcludedGroups=openshift,capella
