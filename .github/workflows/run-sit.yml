name: Run SIT with connection string
run-name: ${{ github.actor }} Run SIT with connection string
on: 
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      sdk:
        description: SDK Performer to use
        type: choice
        options:
        - "java"
        - "go"
        - "dotnet"
        - "cxx"
        - "node"
        - "python"
        - "ruby"
        - "scala"
        - "kotlin"
        - "php"
      sdk-version:
        description: SDK version (tag/SHA/Gerrit ref) to checkout
        type: string
      server-version:
        description: The server version to use on Capella (defaults only currrently, no specific images)
        type: choice
        options:
        - "7.2"
        - "7.6"
      run-specific-test:
        description: Target a specific test to run (i.e. CbDinoTest#rebalance3To5NodesMixedKvAndQuery)
        type: string
      sbx-id-api:
        description: The sandbox api (i.e. https://api.sbx-10.sandbox.nonprod-project-avengers.com) iff using the sbx environment 
        type: string
      sbx-org-id:
        description: The sandbox organisation id to deploy to
        type: string
      sbx-user:
        description: The user for the given sandbox (must already be created)
        type: string
      sbx-password:
        description: The user password for the given sandbox (must already be created)
        type: string

jobs:
  build:
    name: Build
    runs-on: [self-hosted, aws]
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Parameters being used in the run
        run: |
          echo "${{ toJSON(github.event.inputs) }}"
      - uses: actions/checkout@v3
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: install maven
        run: |
          sudo rm /var/lib/dpkg/lock-frontend
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -version
      - name: install dotnet
        run: |
          sudo apt-get install -y gpg
          wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
          sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
          wget https://packages.microsoft.com/config/ubuntu/22.04/prod.list
          sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
          sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
          sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update && \
            sudo apt-get install -y aspnetcore-runtime-8.0
      - name: clone and setup couchbase jvm client 
        run: |
          case "${{ github.event.inputs.sdk }}" in
            ("dotnet")
              git clone git@github.com:couchbase/couchbase-net-client.git
              ;;
            ("java")
              git clone git@github.com:couchbase/couchbase-jvm-clients.git
              cd couchbase-jvm-clients
              sed -i 's/<root level="INFO">/<root level="TRACE">/g' java-fit-performer/src/main/resources/logback.xml
              cat java-fit-performer/src/main/resources/logback.xml
              ;;
            ("scala")
              git clone git@github.com:couchbase/couchbase-jvm-clients.git
              cd couchbase-jvm-clients
              sed -i 's/<root level="info">/<root level="trace">/g' scala-fit-performer/src/main/resources/logback.xml
              cat scala-fit-performer/src/main/resources/logback.xml
              ;;
            ("kotlin")
              git clone git@github.com:couchbase/couchbase-jvm-clients.git
              cd couchbase-jvm-clients
              sed -i 's/<root level="info">/<root level="trace">/g' kotlin-fit-performer/src/main/resources/logback.xml
              cat kotlin-fit-performer/src/main/resources/logback.xml
              ;;
            (*)
              echo "We are good here"
              ;;
          esac
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: clone jenkins sdk repo
        run: |
          git clone git@github.com:couchbaselabs/jenkins-sdk.git
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: create FIT network
        run: |
          docker network create -d bridge fit
      - name: Download and setup cb-dino cluster
        run: |
          wget ${{ vars.CB_DINO_RELEASE_URL }}
          CB_DINO_NAME=$(echo ${{ vars.CB_DINO_RELEASE_URL }} | awk -F'/' '{print $NF}')
          echo "CB_DINO_NAME=$CB_DINO_NAME" >> $GITHUB_ENV
          chmod 744 ./$CB_DINO_NAME
          pwd
      - name: init cbdino cluster for ${{ vars.DEPLOYER }}
        env:
          CB_DINO_NAME: ${{ env.CB_DINO_NAME }}
          CAPELLA_ENDPOINT: ${{ inputs.sbx-id-api || vars.CAP_END_POINT }}
          CAPELLA_OID: ${{ inputs.sbx-org-id || vars.CAP_OID }}
          CAPELLA_USER: ${{ inputs.sbx-user || vars.CAP_USER }}
          CAPELLA_PASS: ${{ inputs.sbx-password || vars.CAP_PASS }}
          CAPELLA_OVERRIDE_TOKEN: ${{ vars.CAP_OVERRIDE_TOKEN }}
          CAPELLA_INTERNAL_SUPPORT_TOKEN: ${{ vars.CAP_INTERNAL_SUPPORT_TOKEN }}
        run: |
          echo "CB_DINO_NAME value is: $CB_DINO_NAME"
          ./$CB_DINO_NAME init --auto --upload-server-logs-host-name=${{ vars.HOSTNAME_DOWNALOAD_SERVER_LOGS }}
          cat ~/.cbdinocluster
      - name: clone fit and build gRPC
        run: |
          git clone git@github.com:couchbaselabs/transactions-fit-performer.git
          case "${{ github.event.inputs.sdk }}" in
            ("dotnet")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            ("cpp")
              git submodule init
              git submodule update --init --force --remote 
              ;;
            ("node")
              echo "${{ github.event.inputs.docker-file-content }}" > transactions-fit-performer/performers/node/Dockerfile
              cat transactions-fit-performer/performers/node/Dockerfile
              ;;
            (*)
              echo "We are good for this"
              ;;
          esac
          cd transactions-fit-performer/gRPC/jvm
          mvn clean install
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Collect dotnet performer logs
        if: ${{ github.event.inputs.sdk == 'dotnet' }}
        run: |
          sed '/ENTRYPOINT.*]/{s/]/, "includeClientLogs=true"]/;p;}' -i transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Dockerfile_NET6
          cat transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Dockerfile_NET6
          sed '/ENTRYPOINT.*]/{s/]/, "includeClientLogs=true"]/;p;}' -i transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Dockerfile_NET8
          cat transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Dockerfile_NET8
          sed -i 's/var logLevel = LogLevel.Debug;/var logLevel = LogLevel.Error;/g' transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Program.cs
          cat transactions-fit-performer/performers/dotnet/Couchbase.Transactions.FitPerformer/Program.cs      
      - name: Set isGerrit flag
        id: set_flag
        run: echo "::set-output name=isGerrit::${{ startsWith(inputs.sdk-version, 'refs/changes') }}"
      - name: build ${{ github.event.inputs.sdk }} performer using specific tag
        if: ${{ github.event.inputs.sdk-version != '' && steps.set_flag.outputs.isGerrit != 'true' }}
        run: |
          cd jenkins-sdk
          ./gradlew buildPerformer --args="-d ../ -i ${{ github.event.inputs.sdk }}-performer -s ${{ github.event.inputs.sdk }} -v ${{ github.event.inputs.sdk-version }}"
      - name: build ${{ github.event.inputs.sdk }} performer using gerrit change
        if: ${{ github.event.inputs.sdk-version != '' && steps.set_flag.outputs.isGerrit == 'true' }}
        run: |
          cd jenkins-sdk
          ./gradlew buildPerformer --args="-d ../ -i ${{ github.event.inputs.sdk }}-performer -s ${{ github.event.inputs.sdk }} -g ${{ github.event.inputs.sdk-version }}"
      - name: build ${{ github.event.inputs.sdk }} performer using latest commit
        if: ${{ github.event.inputs.sdk-version == '' }}
        run: |
          cd jenkins-sdk
          ./gradlew buildPerformer --args="-d ../ -i ${{ github.event.inputs.sdk }}-performer -s ${{ github.event.inputs.sdk }}"
      - name: start ${{ github.event.inputs.sdk }} performer 
        run: |
          cd jenkins-sdk
          docker run --network=fit -d --name ${{ github.event.inputs.sdk }}-performer-container -p 8060:8060 ${{ github.event.inputs.sdk }}-performer
          docker logs --follow ${{ github.event.inputs.sdk }}-performer-container 2>&1 | tee ${{ github.event.inputs.sdk }}-performer-container.log &
      - name: Create directory to collect server logs
        run: |
          mkdir server-logs
      - name: Edit values from the FITConfiguration.json
        run: |
          cd transactions-fit-performer/test-driver
          echo "`jq --arg e "${{ vars.EXCLUDETESTS }}" '.excludeTests=[$e]' FITConfiguration.example.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ github.event.inputs.server-version }}" '.situational.cbdino.version=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ github.event.inputs.server-image }}" '.situational.cbdino.image=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.DEPLOYER }}" '.situational.cbdino.deployer=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.REGION }}" '.situational.cbdino.region=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "/opt/actions-runner/_work/fit-app-deployment/fit-app-deployment/${{ env.CB_DINO_NAME }}" '.situational.cbdino.cbDinoClusterAppPath=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGHOST }}" '.situational.database.jdbc=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ vars.PGUSERNAME }}" '.situational.database.username=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "${{ secrets.PG_PASSWORD }}" '.situational.database.password=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --arg e "/opt/actions-runner/_work/fit-app-deployment/fit-app-deployment/server-logs" '.situational.cbdino.downloadServerLogsDestPath=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --argjson e "false" '.situational.cbdino.enablePrivateEndpoint=$e' FITConfiguration.json`" > FITConfiguration.json
          echo "`jq --argjson e ${{ toJson(vars.WAIT_TIME_BEFORE_EXECUTE_SITUATION) }} '.situational.cbdino.waitTimeBeforeExecuteSituation = ($e | tonumber)' FITConfiguration.json`" > FITConfiguration.json         
          cat FITConfiguration.json
      - name: build driver docker image
        run: |
          cd transactions-fit-performer
          docker build --no-cache -f test-driver/Dockerfile -t fit/test-driver:latest .
      - name: Run SIT tests
        run: |
         cd transactions-fit-performer
         mvn -B --projects test-driver --also-make -Dmaven.test.failure.ignore -DfailIfNoTests=false -Dtest=${{ github.event.inputs.run-specific-test }} test -Dgroups=situational,cbDino,cbDinoRebalance -DexcludedGroups=openshift,capella,cbDinoUpgrade
      - name: Capture ${{ github.event.inputs.sdk }} performer logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performer-logs
          path: jenkins-sdk/${{ github.event.inputs.sdk }}-performer-container.log
          retention-days: 15
      - name: Capture Server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: server-logs
          retention-days: 15
